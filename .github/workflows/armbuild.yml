name: 'publish'

on:
    push:
        branches:
            - webdev

jobs:
    alpha-for-linux-arm:
        strategy:
            fail-fast: false
            matrix:
                include:
                    - os: ubuntu-22.04
                      target: aarch64-unknown-linux-gnu
                      arch: arm64
                    - os: ubuntu-22.04
                      target: armv7-unknown-linux-gnueabihf
                      arch: armhf

        runs-on: ${{ matrix.os }}
        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4

            - name: Install Rust Stable
              uses: dtolnay/rust-toolchain@stable

            - name: Add Rust Target
              run: rustup target add ${{ matrix.target }}

            - name: Rust Cache
              uses: Swatinem/rust-cache@v2
              with:
                  workspaces: src-tauri
                  cache-all-crates: true

            - name: Install Node
              uses: actions/setup-node@v4
              with:
                  node-version: '22'

            - name: Install pnpm
              uses: pnpm/action-setup@v4
              with:
                  version: latest
                  run_install: false

            - name: Pnpm install
              run: pnpm i

            - name: 'Setup for linux'
              run: |-
                  sudo ls -lR /etc/apt/
                  cat > /tmp/sources.list << EOF
                  deb [arch=amd64,i386] http://archive.ubuntu.com/ubuntu jammy main multiverse universe restricted
                  deb [arch=amd64,i386] http://archive.ubuntu.com/ubuntu jammy-security main multiverse universe restricted
                  deb [arch=amd64,i386] http://archive.ubuntu.com/ubuntu jammy-updates main multiverse universe restricted
                  deb [arch=amd64,i386] http://archive.ubuntu.com/ubuntu jammy-backports main multiverse universe restricted
                  deb [arch=armhf,arm64] http://ports.ubuntu.com/ubuntu-ports jammy main multiverse universe restricted
                  deb [arch=armhf,arm64] http://ports.ubuntu.com/ubuntu-ports jammy-security main multiverse universe restricted
                  deb [arch=armhf,arm64] http://ports.ubuntu.com/ubuntu-ports jammy-updates main multiverse universe restricted
                  deb [arch=armhf,arm64] http://ports.ubuntu.com/ubuntu-ports jammy-backports main multiverse universe restricted
                  EOF
                  sudo mv /etc/apt/sources.list /etc/apt/sources.list.default
                  sudo mv /tmp/sources.list /etc/apt/sources.list
                  sudo dpkg --add-architecture ${{ matrix.arch }}
                  sudo apt update
                  sudo apt install -y \
                    libwebkit2gtk-4.1-dev:${{ matrix.arch }} \
                    libayatana-appindicator3-dev:${{ matrix.arch }} \
                    libssl-dev:${{ matrix.arch }} \
                    patchelf:${{ matrix.arch }} \
                    librsvg2-dev:${{ matrix.arch }}
            - name: 'Install aarch64 tools'
              if: matrix.target == 'aarch64-unknown-linux-gnu'
              run: |
                  sudo apt install -y \
                    gcc-aarch64-linux-gnu \
                    g++-aarch64-linux-gnu
            - name: 'Install armv7 tools'
              if: matrix.target == 'armv7-unknown-linux-gnueabihf'
              run: |
                  sudo apt install -y \
                    gcc-arm-linux-gnueabihf \
                    g++-arm-linux-gnueabihf
            - name: Build for Linux
              run: |
                  export PKG_CONFIG_ALLOW_CROSS=1
                  if [ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]; then
                    export PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig/:$PKG_CONFIG_PATH
                    export PKG_CONFIG_SYSROOT_DIR=/usr/aarch64-linux-gnu/
                  elif [ "${{ matrix.target }}" == "armv7-unknown-linux-gnueabihf" ]; then
                    export PKG_CONFIG_PATH=/usr/lib/arm-linux-gnueabihf/pkgconfig/:$PKG_CONFIG_PATH
                    export PKG_CONFIG_SYSROOT_DIR=/usr/arm-linux-gnueabihf/
                  fi
                  pnpm tauri build --target ${{ matrix.target }}
              env:
                  NODE_OPTIONS: '--max_old_space_size=4096'

            - name: Get Version
              run: |
                  sudo apt-get update
                  sudo apt-get install jq
                  echo "VERSION=$(cat package.json | jq '.version' | tr -d '"')" >> $GITHUB_ENV
                  echo "BUILDTIME=$(TZ=Asia/Shanghai date)" >> $GITHUB_ENV
            - name: Upload Release
              uses: softprops/action-gh-release@v2
              with:
                  tag_name: alpha
                  name: 'WebTaur'
                  body: 'More new features are now supported.'
                  prerelease: true
                  token: ${{ secrets.GITHUB_TOKEN }}
                  files: |
                      src-tauri/target/${{ matrix.target }}/release/bundle/deb/*.deb
                      src-tauri/target/${{ matrix.target }}/release/bundle/rpm/*.rpm
